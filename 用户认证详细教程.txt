用户认证系统过程
	a.定义自己的UserProfile并拓展AbstractUser
		- 含义:
			AbstractUser是继承于AbstractBaseUser的一个类,
			它在AbstractBaseUser的基础上,自定义了一些常用的字段以及权限功能.
			
		- 好处:
			能够使用django.contrib.auth模块为我们提供的一些内置的登录验证方法,如:authenticate、login等
		
		- 操作:
			在Models.py中,写入以下代码:
			from datetime import datetime
			from django.contrib.auth.models import AbstractUser
			#这里做个演示,UserProfile表只扩展2个字段
			# blank=True 表示该数据可不填，blank 是针对表单的
			# null=True 表示数据允许为空, null 是针对数据库的
			# blank只是在填写表单的时候可以为空，而在数据库上存储的是一个空字符串；null是在数据库上表现NULL，而不是一个空字符串；
			# blank主要是用在CharField, TextField,这两个字符型字段可以用空字符穿来储存空值。
			# null主要是用在IntegerField，DateField, DateTimeField,这几个字段不接受空字符串，所以在使用时，必须将blank和null同时赋值为True。

			class UserProfile(AbstractUser):
				phone_number = models.CharField(max_length=11, blank=True, null=True)
				birthday = models.DateField(verbose_name=u"生日", null=True, blank=True)

				class Meta:
					verbose_name = "用户信息"
					verbose_name_plural = verbose_name

				def __str__(self):
					return  self.username
			
			# 这个部分主要用于用户注册以及找回密码的邮箱发送
			class EmailVerifyRecord(models.Model):
				code = models.CharField(max_length=20,verbose_name=u'验证码')
				email = models.CharField(max_length=50, verbose_name=u'邮箱')
				send_type = models.CharField(verbose_name=u"验证码类型",choices=(("register",u"注册"),("forget",u"找回密码")),max_length=10)
				send_time = models.DateField(default=datetime.now)

				class Meta:
					verbose_name = u"邮箱验证码"
					verbose_name_plural = verbose_name
					
		- 在settings.py中,必须要注明：
			# 目的是为了告诉Django,使用我们自己扩展的用户model,而不是自带的
			AUTH_USER_MODEL = "userapp.UserProfile"
				
		- 执行数据库迁移操作:
			python manage.py makemigrations
			python manage.py migrate
			
	b.实现注册类(RegisterView)
		- 在settings.py中,注册captcha
			INSTALLED_APPS = [
			'django.contrib.admin',
			'django.contrib.auth',
			'django.contrib.contenttypes',
			'django.contrib.sessions',
			'django.contrib.messages',
			'django.contrib.staticfiles',
			'userapp',
			'captcha'
			]
						
		- 定义forms字段,forms.py中,定义以下字段
			from captcha.fields import CaptchaField #引入验证码
			class RegisterForm(forms.Form):
				username = forms.CharField(required=True,error_messages={'required':'密码不能为空'})
				password = forms.CharField(required=True,min_length=5,error_messages={'required':'密码不能为空','min_length':'密码长度不能小于5'},)
				captcha = CaptchaField(error_messages={"invalid":u"验证码输入错误"}) #error_message用来显示验证码出错后的信息

		- 在userapp中建立一个utils文件夹,并创建一个email_send文件,用来实现发送邮件的功能
			from userapp.models import EmailVerifyRecord
			from random import  Random
			from django.core.mail import  send_mail
			from UserSystem.settings import  EMAIL_FROM


			#这个函数用来生成一段随机的验证码字符串,这里可以自己扩展需要的字符串类型
			def random_str(randomlength=8):
				str = ''
				chars = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789'
				length = len(chars) - 1
				random = Random()
				for i in range(randomlength):
					str+=chars[random.randint(0,length)]
				return str

			# 引用Django内置的send_mail模块进行发送
			def send_register_email(email,send_type='register'):
				email_record = EmailVerifyRecord()
				code = random_str(16)
				email_record.code = code
				email_record.email = email
				email_record.send_type = send_type
				email_record.save()

				email_title = ""
				email_body = ""

				if send_type == 'register':
					email_title = 'Django用户系统激活链接'
					email_body = '''
								您好：
								感谢您注册Django用户系统账号,请点击以下链接进行邮箱验证！若无法点击，请将链接复制到浏览器打开。此链接将在24小时后失效。
								请点击下面的链接激活您的账号:http://127.0.0.1:8000/active/{0}'''.format(code)

					send_status = send_mail(email_title,email_body,EMAIL_FROM,[email])
					if send_status:
						pass
				elif send_type == 'forget':
					email_title = 'Django用户系统找回密码链接'
					email_body = '''
								尊敬的Django用户,您好：
								虽然忘了密码这件事情很羞耻哈哈哈，但还是请你点击以下链接进行找回密码操作！若无法点击，请将链接复制到浏览器打开。此链接将在24小时后失效。
								请点击下面的链接找回你的密码:http://127.0.0.1:8000/reset/{0}'''.format(code)

					send_status = send_mail(email_title,email_body,EMAIL_FROM,[email])
					if send_status:
						pass
		
		- 定义RegisterView类
			class RegisterView(View):
				def get(self,request):
					register_form = RegisterForm()
					return render(request,'register.html',{"register_form":register_form})

				def post(self,request):
					msg = ""
					register_form = RegisterForm(request.POST)
					# 验证提交的数据是否满足form表单的要求
					if register_form.is_valid():
						user_name = request.POST.get("username","")
						password = request.POST.get("password","")
						email = request.POST.get("email", "")
						user_profile = UserProfile()
						if UserProfile.objects.filter(username=user_name):
							msg = "抱歉,该用户名已被注册"
							return render(request,"register.html",{"msg":msg,"register_form":register_form})
						elif UserProfile.objects.filter(email=email):
							msg = "抱歉,该邮箱已被注册"
							return render(request, "register.html", {"msg": msg, "register_form": register_form})
						else:
							user_profile.username = user_name
							user_profile.is_active = False
							# 调用make_password来对密码进行一个加密操作
							user_profile.password = make_password(password)
							user_profile.email = email
							user_profile.save()

							# 书写send_register_email函数实现发邮件功能
							send_register_email(email, "register")
							return render(request, 'send_success.html')
					else:
						return render(request,"register.html",{"register_form":register_form})
		
		- 在urls.py中,书写对应的路由映射关系
			url(r'register/$', RegisterView.as_view(),name="register"),
			url(r'^captcha/', include('captcha.urls'))
			
	c.实现激活用户类(ActiveUserView)
		- 定义ActiveUserView类
			class ActiveUserView(View):
				def get(self,request,active_code):
					all_records = EmailVerifyRecord.objects.filter(code=active_code)
					# 判断请求过来的code值是否是我们之前发给用户的code,如果是,则激活该用户
					if all_records:
						for record in all_records:
							email = record.email
							user = UserProfile.objects.get(email=email)
							user.is_active = True
							user.save()
					else:
						return render(request,'active_fail.html')
					return render(request,'login.html')
		
		- 在urls.py中,书写对应的路由映射关系
			#这么写是为了要取出网址中的active_code值给后台做判断
			#注：.*为正则表达式，在于去除active后面的所有字符
			url(r'^active/(?P<active_code>.*)/$',ActiveUserView.as_view(),name='user_active' ),
	
	d.实现登录类(LoginView)
		- 定义forms字段,forms.py中,定义以下字段
			from django import forms
			class LoginForm(forms.Form):
				username = forms.CharField(required=True,error_messages={'required':'密码不能为空'})
				password = forms.CharField(required=True,error_messages={'required':'密码不能为空'})
				
		- 定义LoginView类
			# 我们实现登录共有三部分验证过程
			# 1.判断用户是否已经注册
			# 2.判断用户注册了是否已经激活账号
			# 3.判断用户的账号和密码是否正确
			class LoginView(View):
				def get(self,request):
					return render(request,'login.html')

				def post(self,request):
					# 做一个表单验证判断
					login_form = LoginForm(request.POST)
					# 如果数据合法,就执行接下来的操作
					if login_form.is_valid():
						user_name = request.POST.get("username", "")
						pass_word = request.POST.get("password", "")
						# 判断该用户是否存在于用户表中(即已经注册过)
						if UserProfile.objects.filter(username=user_name):
							# 引入authenticate方法对用户的用户名和密码做一个认证操作
							user = authenticate(username=user_name,password=pass_word)
							if user is not None:
								if user.is_active:
									# 判断用户是否为激活状态
									# login函数的作用能根据用户的信息生成session id,并保存在django的session中，当退出浏览器后，将会清空这个表
									# cookie:一种保存文件在本地的机制，可在用户访问时带上这些信息，但是不安全，所以需要session，它会从数据库中生成一段随机的session id,用户访问时带上这个id，可以实现自动登录，但是一段时间后便会过期
									login(request,user)
									return redirect("/index/",{'user':user_name})
								else:
									return render(request, 'login.html', {'msg': '用户未激活!请到注册的邮箱中激活该用户！'})
							else:
								return render(request, 'login.html', {'msg': '用户名或密码错误！'})
						else:
							return render(request,'login.html',{'msg':'该用户未注册！'})
		
		- 在urls.py中,书写对应的路由映射关系
			url(r'login/$',LoginView.as_view(),name='login')
	
	e.实现找回密码类(ForgetPwdView)
		- 定义forms字段,forms.py中,定义以下字段
			class ForgetPwdView(forms.Form):
				email = forms.EmailField(required=True,error_messages={'required':'密码不能为空'})
				captcha = CaptchaField(error_messages={"invalid":u"验证码错误"})
		
		- 定义ForgetPwdView类
			class ForgetPwdView(View):
				def get(self,request):
					forget_form = ForgetForm()
					return render(request,'forgetpwd.html',{'forget_form':forget_form})

				def post(self,request):
					forget_form = ForgetForm(request.POST)
					if forget_form.is_valid():
						emai = request.POST.get("email","")
						if  UserProfile.objects.filter(email=emai):
							# 如果该邮箱已经注册,则要判断它是否已经发过邮件了,如果表里已经存在send_type='forget'的,则要先删除，避免重复发邮件
							if EmailVerifyRecord.objects.filter(email=emai,send_type="forget"):
								EmailVerifyRecord.objects.get(email=emai,send_type="forget").delete()
							send_register_email(emai, "forget")
							return render(request,'send_success.html')
						else:
							msg = "该邮箱还未被注册!"
							return render(request,'forgetpwd.html',{'forget_form':forget_form,'msg':msg})
					else:
						return render(request, 'forgetpwd.html', {'forget_form': forget_form})
		
		- 在urls.py中,书写对应的路由映射关系
			url(r'^forget/$', ForgetPwdView.as_view(), name="forget")
			
	f.实现重置密码类(ResetView)
		- 定义LoginView类
			class ResetView(View):
				def get(self,request,active_code):
					all_records = EmailVerifyRecord.objects.filter(code=active_code)
					if all_records:
						for record in all_records:
							email = record.email
							return render(request,'password_reset.html',{'email':email})
					else:
						return render(request,'active_fail.html')
					return render(request,'login.html')
		
		- 在urls.py中,书写对应的路由映射关系
			url(r'^reset/(?P<active_code>.*)/$',ResetView.as_view(),name='reset_pwd' )
	
	g.修改密码类(ModifyPwdView)
		- 定义修改密码类
			class ModifyPwdView(View):
				def post(self,request):
					modify_form = ModifyPwdForm(request.POST)
					if modify_form.is_valid():
						newpassword = request.POST.get("newpassword","")
						confirmpassword = request.POST.get("confirmpassword", "")
						email = request.POST.get("email", "")
						code = request.POST.get("code","")
						if newpassword!= confirmpassword:
							msg = "两次输入的密码不一致"
							return render(request, 'password_reset.html', {'email': email, 'msg': msg})
						if EmailVerifyRecord.objects.get(code=code):
							user = UserProfile.objects.get(email=email)
							user.password = make_password(newpassword)
							user.save()

							# 重置完,删掉原来的code,防止重复修改
							EmailVerifyRecord.objects.get(code=code).delete()

						return render(request, 'login.html')
					else:
						return render(request,'password_reset.html',{'modify_form': modify_form})
		
		- 在urls.py中,书写对应的路由映射关系
			url(r'^modify_pwd/$', ModifyPwdView.as_view(), name="modify_pwd")
			
	h.定义主页类(IndexView)和注销类(LogOutView)
		- 定义主页类
			# 主页类
			class IndexView(View):
				def get(self,request):
					return render(request,'index.html')
		
		- 定义注销类
			#注销类
			class LogOutView(View):
				def get(self,request):
					logout(request)
					return redirect("/index/")

	i.自定义认证后台(CustomBackend)
		- 含义
			有时候,我们希望用户在登录的时候,不仅仅能够使用用户名进行登录,还能使用邮箱进行登录
			通过阅读authenticate方法的源码我们可以知道,django在使用authenticate时,会动用到backend中的authenticate进行认证
			我们只需要修改这个认证方法,改成我们想要的即可
		
		- 定义CustomBackend类
			class CustomBackend(ModelBackend):
				def authenticate(self, request, username=None, password=None, **kwargs):
					try:
						#获取UserProfile数据表中对应的User,这里用到了Q查询,可以自行上网科普一下，嘿嘿~
						#用来判断输入的指定字段是否存在于UserProfile数据表中
						user = UserProfile.objects.get(Q(username = username) | Q(email = username))
						#检查密码是否正确
						if user.check_password(password):
							return user
					except Exception as e:
						return None
		
		- 在settings.py中,设置AUTHENTICATION_BACKENDS属性
			- 含义
				用于告诉django使用我们自定义的后台认证,而不是他默认的,默认的只会去校验用户名而已
			- 操作
				AUTHENTICATION_BACKENDS = (
					'userapp.views.CustomBackend',
				)
			
		
	